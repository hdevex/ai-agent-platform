{
  "permissions": {
    "allow": [
      "Read(**/*.py)",
      "Read(**/*.md)",
      "Read(**/*.rst)",
      "Read(**/*.txt)",
      "Read(**/*.json)",
      "Read(**/*.yaml)",
      "Read(**/*.yml)",
      "Read(**/*.toml)",
      "Read(**/*.cfg)",
      "Read(**/*.ini)",
      "Read(**/requirements*.txt)",
      "Read(**/setup.py)",
      "Read(**/Dockerfile*)",
      "Read(**/docker-compose*.yml)",
      "Read(.github/**/*)",
      "Read(tests/**/*)",
      "Read(docs/**/*)",
      "Edit(**/*.py)",
      "Edit(**/*.md)",
      "Edit(**/*.rst)",
      "Edit(**/*.txt)",
      "Edit(**/*.json)",
      "Edit(**/*.yaml)",
      "Edit(**/*.yml)",
      "Edit(**/*.toml)",
      "Edit(**/*.cfg)",
      "Edit(**/*.ini)",
      "Edit(tests/**/*)",
      "Edit(docs/**/*)",
      "Edit(.github/**/*)",
      "Write(src/**/*)",
      "Write(ai_agent_platform/**/*)",
      "Write(tests/**/*)",
      "Write(docs/**/*)",
      "Write(**/*.py)",
      "Write(**/*.md)",
      "Write(**/*.rst)",
      "Write(**/*.txt)",
      "Write(**/*.json)",
      "Write(**/*.yaml)",
      "Write(**/*.yml)",
      "Write(**/*.sql)",
      "Write(migrations/**/*)",
      "Write(scripts/**/*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git status:*)",
      "Bash(git log:*)",
      "Bash(git diff:*)",
      "Bash(git branch:*)",
      "Bash(git init:*)",
      "Bash(git remote:*)",
      "Bash(gh repo create:*)",
      "Bash(gh auth:*)",
      "Bash(pytest:*)",
      "Bash(python:*)",
      "Bash(python -m pytest:*)",
      "Bash(python -m ai_agent_platform:*)",
      "Bash(ruff:*)",
      "Bash(black:*)",
      "Bash(mypy:*)",
      "Bash(uvicorn:*)",
      "Bash(fastapi:*)",
      "Bash(pip install -e .:*)",
      "Bash(pip install -e .[dev]:*)",
      "Bash(pip install -e .[test]:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(tree:*)",
      "Bash(curl http://localhost:*)",
      "Bash(curl https://localhost:*)",
      "Task(subagent_type:general-purpose)",
      "Task(subagent_type:backend-architect)",
      "Task(subagent_type:frontend-architect)",
      "Task(subagent_type:debug-specialist)",
      "Task(subagent_type:integration-specialist)",
      "Task(subagent_type:financial-data-analyzer)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose logs:*)",
      "Bash(docker-compose ps:*)",
      "Bash(docker-compose exec:*)",
      "Bash(docker logs:*)",
      "Bash(docker ps:*)",
      "Bash(docker images:*)",
      "Bash(docker inspect:*)",
      "Bash(docker build:*)",
      "Bash(docker-compose build:*)",
      "Bash(docker run:*)",
      "Bash(pip install:*)",
      "Bash(npm install:*)",
      "Bash(yarn install:*)",
      "Edit(**/requirements.txt)",
      "Edit(**/package.json)",
      "Edit(**/pyproject.toml)",
      "Edit(**/docker-compose.yml)",
      "Edit(**/Dockerfile)",
      "Write(**/requirements.txt)",
      "Write(**/package.json)",
      "Write(**/pyproject.toml)",
      "Write(**/docker-compose.yml)",
      "Write(**/Dockerfile)",
      "Bash(PYTHONPATH=/mnt/c/Users/nvntr/Documents/ai_agent_platform/src python -m pytest tests/integration/test_lm_studio_integration.py::TestLMStudioIntegration::test_health_check_success -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/nvntr/Documents/ai_agent_platform/src python -c \"import ai_agent_platform.config; print(''Configuration import successful'')\")",
      "Bash(git rev-list:*)",
      "Bash(PYTHONPATH=/mnt/c/Users/nvntr/Documents/ai_agent_platform/src python -m ai_agent_platform.main)",
      "Bash(ss:*)",
      "Read(/mnt/c/Users/nvntr/Documents/ai_agent_platform/**)",
      "Read(/mnt/c/Users/nvntr/Documents/ai_agent_platform/src/**)",
      "Read(/mnt/c/Users/nvntr/Documents/ai_agent_platform/**)",
      "Read(/mnt/c/Users/nvntr/Documents/ai_agent_platform/**)",
      "Read(/mnt/c/Users/nvntr/Documents/ai_agent_platform/**)"
    ],
    "deny": [
      "Read(**/.env)",
      "Read(**/secrets/**/*)",
      "Read(**/*.key)",
      "Read(**/*.pem)",
      "Read(**/*private*)",
      "Read(**/*password*)",
      "Edit(**/.env)",
      "Edit(**/secrets/**/*)",
      "Edit(**/*.key)",
      "Edit(**/*.pem)",
      "Edit(**/*private*)",
      "Edit(**/*password*)",
      "Write(**/.env)",
      "Write(**/secrets/**/*)",
      "Write(**/*.key)",
      "Write(**/*.pem)",
      "Write(**/*private*)",
      "Write(**/*password*)",
      "Bash(rm -rf:*)",
      "Bash(rm -r:*)",
      "Bash(sudo:*)",
      "Bash(chmod 777:*)",
      "Bash(chown:*)",
      "Bash(docker rm:*)",
      "Bash(docker rmi:*)",
      "Bash(docker volume rm:*)",
      "Bash(docker volume prune:*)",
      "Bash(docker image rm:*)",
      "Bash(docker image prune:*)",
      "Bash(docker system prune:*)",
      "Bash(docker container rm:*)",
      "Bash(docker container prune:*)",
      "Bash(docker network rm:*)",
      "Bash(docker network prune:*)",
      "Bash(docker-compose rm:*)",
      "Bash(docker-compose down --volumes:*)",
      "Bash(docker-compose down -v:*)",
      "Bash(docker stop:*)",
      "Bash(docker kill:*)",
      "Bash(docker restart:*)",
      "Bash(pip uninstall:*)",
      "Bash(npm uninstall:*)",
      "Bash(yarn remove:*)",
      "Bash(git reset --hard:*)",
      "Bash(git rebase:*)",
      "Bash(git merge:*)",
      "Bash(git push --force:*)",
      "Bash(git push -f:*)"
    ],
    "ask": [
      "Bash(git push:*)",
      "Bash(docker-compose down:*)"
    ],
    "defaultMode": "acceptEdits"
  },
  "autonomousMode": {
    "enabled": true,
    "maxDurationHours": 8,
    "queuePermissionRequests": true,
    "allowContinuousWork": true,
    "safeOperationsOnly": true,
    "autoCommitProgress": true,
    "progressReportingInterval": 30
  },
  "mcp": {},
  "systemPrompt": "You are working on the Universal AI Agent Platform - a factory for creating specialized AI agents from PRDs. This platform is completely independent and universal, designed to create agents for any task without hardcoded assumptions. Focus on reusable, scalable architecture using LangChain, LlamaIndex, FastAPI, PostgreSQL, and Redis. Always refer to the project documentation and maintain the agent factory pattern.",
  "customInstructions": "IMPORTANT: This is a universal AI agent platform project. Always:\n1. Read project documentation first (README.md, PLATFORM_ARCHITECTURE.md, PROJECT_CHARTER.md)\n2. Maintain universal, PRD-driven architecture - no hardcoded solutions\n3. Focus on agent factory patterns and reusable infrastructure\n4. Use the established tech stack: LangChain, LlamaIndex, FastAPI, PostgreSQL, Redis\n5. Follow professional development practices with proper testing and documentation\n6. Keep everything independent - no integration with external applications\n7. Update CLAUDE_CODE_SESSION_HANDOFF.md with progress and decisions\n8. NEVER run destructive Docker commands - they are strictly forbidden\n9. Commit progress regularly for user review when they return",
  "testCommand": "pytest tests/ -v --cov=ai_agent_platform --cov-report=term-missing",
  "lintCommand": "ruff check . && black --check .",
  "formatCommand": "black . && ruff check --fix .",
  "buildCommand": "python -m build",
  "devCommand": "uvicorn ai_agent_platform.main:app --reload --host 0.0.0.0 --port 8000",
  "safetySystems": {
    "dockerProtection": {
      "enabled": true,
      "description": "Comprehensive protection against destructive Docker operations",
      "blockedCommands": [
        "docker rm",
        "docker rmi",
        "docker volume rm",
        "docker image rm",
        "docker system prune",
        "docker container rm",
        "docker network rm",
        "docker-compose rm",
        "docker-compose down --volumes"
      ]
    },
    "dataProtection": {
      "enabled": true,
      "description": "Protect sensitive files and prevent data loss",
      "sensitivePatterns": [
        "**/.env",
        "**/secrets/**",
        "**/*.key",
        "**/*.pem",
        "**/*private*"
      ]
    },
    "autonomousDevelopment": {
      "enabled": true,
      "maxSessionHours": 8,
      "progressCommits": true,
      "safetyFirst": true,
      "queuePermissions": true
    }
  },
  "userAwayMode": {
    "enabled": true,
    "description": "Enable long autonomous development sessions while user is away",
    "features": {
      "queuePermissionRequests": true,
      "autoCommitProgress": true,
      "continueWorkAfterPrompts": true,
      "reportProgressPeriodically": true
    },
    "emergencyStop": {
      "onCriticalError": true,
      "onSecurityIssue": true,
      "onUnrecoverableState": true
    }
  }
}