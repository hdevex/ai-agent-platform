# AI Agent Platform - CI/CD Pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # =============================================================================
  # PYTHON BACKEND TESTING & QUALITY
  # =============================================================================
  python-quality:
    name: Python Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        
    - name: Code Formatting Check (Black)
      run: |
        black --check --diff .
        
    - name: Linting (Ruff)
      run: |
        ruff check .
        
    - name: Type Checking (MyPy)
      run: |
        mypy ai_agent_platform/
        
    - name: Unit Tests
      run: |
        pytest tests/ -v --cov=ai_agent_platform --cov-report=xml --cov-report=term-missing
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        
  # =============================================================================
  # DEPENDENCY SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Dependency Vulnerability Scan (Safety)
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Dependency Audit (pip-audit)
      run: |
        pip-audit --desc --output=pip-audit-report.json --format=json || true
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          
  # =============================================================================
  # DOCKER BUILD & VALIDATION
  # =============================================================================
  docker-build:
    name: Docker Build & Validation
    runs-on: ubuntu-latest
    needs: [python-quality]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker Image
      run: |
        docker build -t ai-agent-platform:${{ github.sha }} .
        
    - name: Test Docker Image
      run: |
        docker run --rm ai-agent-platform:${{ github.sha }} python -c "import ai_agent_platform; print('Import successful')"
        
  # =============================================================================
  # INTEGRATION TESTING
  # =============================================================================
  integration-tests:
    name: Integration & E2E Testing  
    runs-on: ubuntu-latest
    needs: [python-quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_ai_agent_platform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        
    - name: Run Integration Tests
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_ai_agent_platform
        TEST_REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/integration/ -v --maxfail=5 -m "integration"
        
  # =============================================================================
  # NOTIFICATION & REPORTING
  # =============================================================================
  notify-completion:
    name: Pipeline Completion Notification
    runs-on: ubuntu-latest
    needs: [python-quality, security-scan, docker-build, integration-tests]
    if: always()
    
    steps:
    - name: Pipeline Status Summary
      run: |
        echo "=== CI/CD Pipeline Execution Summary ==="
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Python Quality: ${{ needs.python-quality.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "============================================"
